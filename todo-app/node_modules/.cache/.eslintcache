[{"C:\\Users\\Admin\\Desktop\\project\\todo-app\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\project\\todo-app\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\project\\todo-app\\src\\reportWebVitals.js":"3","C:\\Users\\Admin\\Desktop\\project\\todo-app\\src\\components\\ToDoList.js":"4","C:\\Users\\Admin\\Desktop\\project\\todo-app\\src\\components\\ToDo.js":"5"},{"size":517,"mtime":1648131430181,"results":"6","hashOfConfig":"7"},{"size":2561,"mtime":1648131430175,"results":"8","hashOfConfig":"7"},{"size":375,"mtime":1648131430183,"results":"9","hashOfConfig":"7"},{"size":301,"mtime":1648131430177,"results":"10","hashOfConfig":"7"},{"size":607,"mtime":1648131430176,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"77z0bl",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\Desktop\\project\\todo-app\\src\\index.js",[],[],"C:\\Users\\Admin\\Desktop\\project\\todo-app\\src\\App.js",["28","29","30","31","32","33"],[],"import './App.css';\r\n//bootstrap css file\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { ToDoList } from './components/ToDoList';\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport Form from 'react-bootstrap/esm/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Container } from 'react-bootstrap';\r\n\r\nfunction App() {\r\n\r\n  //useStates\r\n  var [todoList, setToDo] = useState([])\r\n  var [count, setCount] = useState(1);\r\n  //useRef\r\n  var nameToDo = useRef()\r\n  //css\r\n  var main = {\r\n    margin: 'auto',\r\n    width: 400,\r\n  }\r\n  var boxAlert = {\r\n    backgroundColor: \"#ffcccc\",\r\n    border: \"1px solid red\",\r\n    color: \"red\",\r\n    marginTop: \"20px\",\r\n  }\r\n  var boxSuccess = {\r\n    backgroundColor: \"#d7ffc7\",\r\n    border: \"1px solid green\",\r\n    color: \"green\",\r\n    marginTop: \"20px\",\r\n  }\r\n  const handleAddToDo = (e) => {\r\n    let flag = 0;\r\n    let name = nameToDo.current.value;\r\n    if (name == '') {\r\n      alert(\"Empty ToDo input\");\r\n      return\r\n    }\r\n    todoList.map(ele => {\r\n      if (ele.name.toUpperCase() == name.toUpperCase()) {\r\n        alert(\"Can not enter same name\");\r\n        flag = 1;\r\n      }\r\n    })\r\n    if (flag != 1) {\r\n      setCount(count + 1);\r\n      setToDo((previousToDo) => {\r\n        return [...previousToDo, { id: count, name: name, completed: false }]\r\n      })\r\n    }\r\n    nameToDo.current.value = \"\";\r\n  }\r\n\r\n  const toggleToDo = (id) => {\r\n    const newToDos = [...todoList]\r\n    const todo = newToDos.find(todo => todo.id === id)\r\n    todo.status = !todo.status;\r\n    setToDo(newToDos);\r\n  }\r\n\r\n  const handleClearToDo = (e) => {\r\n    const completed = todoList.filter(todo => !todo.status)\r\n    setToDo(completed)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div style={main} >\r\n        <div style={todoList.filter(todo => !todo.status).length ? boxAlert : boxSuccess}>{todoList.filter(todo => !todo.status).length} LEFT TO COMPLETE !</div>\r\n        <Form>\r\n          <Form.Group className=\"mt-5\">\r\n            <Form.Label>Enter ToDo</Form.Label>\r\n            <Form.Control type=\"text\" ref={nameToDo} placeholder=\"To Do\" />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"button\" onClick={handleAddToDo} className='m-3'>\r\n            Add ToDo\r\n          </Button>\r\n          <Button variant=\"primary\" type=\"button\" onClick={handleClearToDo}>\r\n            Show Only Incomplete ToDos\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n\r\n      <ToDoList todoList={todoList} toggleToDo={toggleToDo} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n// ","C:\\Users\\Admin\\Desktop\\project\\todo-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\Admin\\Desktop\\project\\todo-app\\src\\components\\ToDoList.js",[],[],"C:\\Users\\Admin\\Desktop\\project\\todo-app\\src\\components\\ToDo.js",[],[],{"ruleId":"34","severity":1,"message":"35","line":6,"column":28,"nodeType":"36","messageId":"37","endLine":6,"endColumn":37},{"ruleId":"34","severity":1,"message":"38","line":9,"column":10,"nodeType":"36","messageId":"37","endLine":9,"endColumn":19},{"ruleId":"39","severity":1,"message":"40","line":38,"column":14,"nodeType":"41","messageId":"42","endLine":38,"endColumn":16},{"ruleId":"43","severity":1,"message":"44","line":42,"column":22,"nodeType":"45","messageId":"46","endLine":42,"endColumn":24},{"ruleId":"39","severity":1,"message":"40","line":43,"column":34,"nodeType":"41","messageId":"42","endLine":43,"endColumn":36},{"ruleId":"39","severity":1,"message":"47","line":48,"column":14,"nodeType":"41","messageId":"42","endLine":48,"endColumn":16},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '!==' and instead saw '!='."]